plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    alias libs.plugins.loom
}
base {
    archivesName = "${mod_name}-fabric-${libs.versions.minecraft.get()}"
}
dependencies {
    minecraft libs.minecraft
    mappings loom.officialMojangMappings()
    modImplementation libs.bundles.fabric
    compileOnly project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    mods {
        register(mod_id) {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.test)
        }
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            setSource(sourceSets.test)
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            setSource(sourceSets.test)
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

processTestResources {
    from project(":common").sourceSets.test.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
